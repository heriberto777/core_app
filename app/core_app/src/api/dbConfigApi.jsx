import { ENV } from "../utils/constants";

export class DBConfigApi {
  baseApi = ENV.BASE_API;

  /**
   * Obtener todas las configuraciones de base de datos
   * @param {string} accessToken - Token de acceso
   * @returns {Promise<Array>} - Lista de configuraciones
   */
  async getDBConfigs(accessToken) {
    try {
      const url = `${this.baseApi}/config/db`;
      const params = {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
      };

      const response = await fetch(url, params);
      const result = await response.json();

      if (!response.ok) {
        throw new Error(
          result.error || result.message || `HTTP ${response.status}`
        );
      }

      return result;
    } catch (error) {
      console.error("‚ùå Error al obtener configuraciones DB:", error);
      throw error;
    }
  }

  /**
   * Crear o actualizar configuraci√≥n de base de datos
   * @param {string} accessToken - Token de acceso
   * @param {Object} configData - Datos de configuraci√≥n
   * @returns {Promise<Object>} - Resultado de la operaci√≥n
   */
  async createDBConfig(accessToken, configData) {
    try {
      // Validar que configData sea un objeto v√°lido
      if (!configData || typeof configData !== "object") {
        throw new Error("Datos de configuraci√≥n inv√°lidos");
      }

      console.log(
        "üì§ Enviando datos de configuraci√≥n:",
        JSON.stringify(configData, null, 2)
      );

      const url = `${this.baseApi}/config/create/db`;
      const params = {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
        body: JSON.stringify(configData),
      };

      const response = await fetch(url, params);
      const result = await response.json();

      if (!response.ok) {
        throw new Error(
          result.error || result.message || `HTTP ${response.status}`
        );
      }

      console.log("‚úÖ Configuraci√≥n creada/actualizada exitosamente:", result);
      return result;
    } catch (error) {
      console.error("‚ùå Error al crear configuraci√≥n DB:", error);
      throw error;
    }
  }

  /**
   * Eliminar configuraci√≥n de base de datos
   * @param {string} accessToken - Token de acceso
   * @param {string} serverName - Nombre del servidor
   * @returns {Promise<Object>} - Resultado de la operaci√≥n
   */
  async deleteDBConfig(accessToken, serverName) {
    try {
      const url = `${this.baseApi}/config/delete/db/${encodeURIComponent(
        serverName
      )}`;
      const params = {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
      };

      const response = await fetch(url, params);
      const result = await response.json();

      if (!response.ok) {
        throw new Error(
          result.error || result.message || `HTTP ${response.status}`
        );
      }

      return result;
    } catch (error) {
      console.error("‚ùå Error al eliminar configuraci√≥n DB:", error);
      throw error;
    }
  }

  /**
   * Probar conexi√≥n con configuraci√≥n nueva o temporal
   * @param {string} accessToken - Token de acceso
   * @param {Object} configData - Datos de configuraci√≥n para probar
   * @returns {Promise<Object>} - Resultado de la prueba
   */
  async testConnection(accessToken, configData) {
    try {
      console.log(
        "üß™ Probando conexi√≥n con configuraci√≥n:",
        JSON.stringify(configData, null, 2)
      );

      const url = `${this.baseApi}/config/test/db`;
      const params = {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
        body: JSON.stringify(configData),
      };

      const response = await fetch(url, params);
      const result = await response.json();

      // Agregar informaci√≥n sobre el status de la respuesta
      const testResult = {
        success: response.ok,
        status: response.status,
        timestamp: new Date().toISOString(),
        ...result,
      };

      if (response.ok) {
        console.log("‚úÖ Prueba de conexi√≥n exitosa:", testResult);
      } else {
        console.warn("‚ö†Ô∏è Prueba de conexi√≥n fall√≥:", testResult);
      }

      return testResult;
    } catch (error) {
      console.error("‚ùå Error al probar conexi√≥n:", error);
      return {
        success: false,
        error: error.message,
        timestamp: new Date().toISOString(),
      };
    }
  }

  /**
   * üÜï Probar conexi√≥n a servidor configurado (server1 o server2)
   * @param {string} accessToken - Token de acceso
   * @param {string} serverName - Nombre del servidor ('server1' o 'server2')
   * @returns {Promise<Object>} - Resultado de la prueba
   */
  async testConfiguredServer(accessToken, serverName) {
    try {
      if (!["server1", "server2"].includes(serverName)) {
        throw new Error("Servidor inv√°lido. Use 'server1' o 'server2'");
      }

      console.log(`üîç Probando servidor configurado: ${serverName}`);

      const url = `${this.baseApi}/config/test/db/${serverName}`;
      const params = {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
      };

      const response = await fetch(url, params);
      const result = await response.json();

      const testResult = {
        success: response.ok,
        status: response.status,
        serverName: serverName,
        timestamp: new Date().toISOString(),
        ...result,
      };

      if (response.ok) {
        console.log(`‚úÖ Prueba de ${serverName} exitosa:`, testResult);
      } else {
        console.warn(`‚ö†Ô∏è Prueba de ${serverName} fall√≥:`, testResult);
      }

      return testResult;
    } catch (error) {
      console.error(`‚ùå Error al probar ${serverName}:`, error);
      return {
        success: false,
        serverName: serverName,
        error: error.message,
        timestamp: new Date().toISOString(),
      };
    }
  }

  /**
   * üÜï Diagn√≥stico completo del sistema
   * @param {string} accessToken - Token de acceso
   * @returns {Promise<Object>} - Resultado del diagn√≥stico completo
   */
  async performSystemDiagnostic(accessToken) {
    try {
      console.log("üîç Iniciando diagn√≥stico completo del sistema...");

      const url = `${this.baseApi}/health/diagnostic`;
      const params = {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
      };

      const response = await fetch(url, params);
      const result = await response.json();

      const diagnosticResult = {
        success: response.ok,
        status: response.status,
        timestamp: new Date().toISOString(),
        ...result,
      };

      if (response.ok) {
        console.log("‚úÖ Diagn√≥stico completo exitoso:", diagnosticResult);
      } else {
        console.warn("‚ö†Ô∏è Diagn√≥stico completo con issues:", diagnosticResult);
      }

      return diagnosticResult;
    } catch (error) {
      console.error("‚ùå Error en diagn√≥stico completo:", error);
      return {
        success: false,
        error: error.message,
        timestamp: new Date().toISOString(),
      };
    }
  }

  /**
   * üÜï Probar conexi√≥n a server2 espec√≠ficamente (tu caso de uso)
   * @param {string} accessToken - Token de acceso
   * @returns {Promise<Object>} - Resultado de la prueba de server2
   */
  async testServer2Connection(accessToken) {
    try {
      console.log("üîç Probando conexi√≥n espec√≠fica a server2...");
      return await this.testConfiguredServer(accessToken, "server2");
    } catch (error) {
      console.error("‚ùå Error al probar server2:", error);
      return {
        success: false,
        serverName: "server2",
        error: error.message,
        timestamp: new Date().toISOString(),
      };
    }
  }

  /**
   * üÜï Probar conexi√≥n con timeout personalizado
   * @param {string} accessToken - Token de acceso
   * @param {Object} configData - Datos de configuraci√≥n
   * @param {number} timeoutMs - Timeout en milisegundos (default: 120000 = 2 minutos)
   * @returns {Promise<Object>} - Resultado de la prueba
   */
  async testConnectionWithTimeout(accessToken, configData, timeoutMs = 120000) {
    try {
      console.log(
        `üß™ Probando conexi√≥n con timeout de ${timeoutMs}ms:`,
        configData
      );

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeoutMs);

      const url = `${this.baseApi}/config/test/db`;
      const params = {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
        body: JSON.stringify(configData),
        signal: controller.signal,
      };

      try {
        const response = await fetch(url, params);
        clearTimeout(timeoutId);

        const result = await response.json();

        const testResult = {
          success: response.ok,
          status: response.status,
          timestamp: new Date().toISOString(),
          timeout: timeoutMs,
          ...result,
        };

        if (response.ok) {
          console.log("‚úÖ Prueba con timeout exitosa:", testResult);
        } else {
          console.warn("‚ö†Ô∏è Prueba con timeout fall√≥:", testResult);
        }

        return testResult;
      } catch (fetchError) {
        clearTimeout(timeoutId);

        if (fetchError.name === "AbortError") {
          const timeoutResult = {
            success: false,
            error: `Timeout despu√©s de ${timeoutMs}ms`,
            timeout: true,
            timestamp: new Date().toISOString(),
          };
          console.warn("‚è∞ Timeout en prueba de conexi√≥n:", timeoutResult);
          return timeoutResult;
        }

        throw fetchError;
      }
    } catch (error) {
      console.error("‚ùå Error en prueba con timeout:", error);
      return {
        success: false,
        error: error.message,
        timestamp: new Date().toISOString(),
        timeout: timeoutMs,
      };
    }
  }

  /**
   * üÜï Obtener estad√≠sticas de conexiones
   * @param {string} accessToken - Token de acceso
   * @returns {Promise<Object>} - Estad√≠sticas de conexiones
   */
  async getConnectionStats(accessToken) {
    try {
      console.log("üìä Obteniendo estad√≠sticas de conexiones...");

      const url = `${this.baseApi}/health/stats`;
      const params = {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
      };

      const response = await fetch(url, params);
      const result = await response.json();

      if (!response.ok) {
        throw new Error(
          result.error || result.message || `HTTP ${response.status}`
        );
      }

      console.log("üìà Estad√≠sticas obtenidas:", result);
      return result;
    } catch (error) {
      console.error("‚ùå Error al obtener estad√≠sticas:", error);
      throw error;
    }
  }
}
