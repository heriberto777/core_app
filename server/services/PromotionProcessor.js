const logger = require("./logger");

/**
 * Procesador de Promociones - Versi√≥n Completa y Mejorada
 * Maneja la detecci√≥n, transformaci√≥n y aplicaci√≥n de promociones autom√°ticamente
 * INCLUYE: Conversiones de cantidades, referencias de l√≠neas, y l√≥gica de bonificaci√≥n completa
 */
class PromotionProcessor {
  // ===============================
  // 1. M√âTODOS PRINCIPALES DE PROCESAMIENTO
  // ===============================

  /**
   * Procesa datos con promociones autom√°ticamente - M√âTODO PRINCIPAL MEJORADO
   * @param {Array} data - Datos a procesar
   * @param {Object} mapping - Configuraci√≥n de mapping
   * @param {Object} fieldConfig - Configuraci√≥n de campos (opcional, detectada autom√°ticamente)
   * @returns {Array} - Datos procesados con promociones
   */
  static processPromotionsWithConfig(data, mapping, fieldConfig = null) {
    try {
      logger.info("üéÅ INICIANDO PROCESAMIENTO DE PROMOCIONES MEJORADO");

      if (!this.shouldUsePromotions(mapping)) {
        logger.info("üìã Procesamiento est√°ndar - sin promociones");
        return data.map((row) =>
          this.transformNormalLine(row, fieldConfig || {})
        );
      }

      // ‚úÖ USAR CONFIGURACI√ìN DETECTADA O POR DEFECTO
      const effectiveFieldConfig =
        fieldConfig || this.getFieldConfiguration(mapping);

      logger.info(
        `üéÅ Configuraci√≥n de campos utilizada: ${JSON.stringify(
          effectiveFieldConfig,
          null,
          2
        )}`
      );

      // ‚úÖ VALIDAR QUE LOS DATOS TENGAN LOS CAMPOS REQUERIDOS
      if (!this.validateDataFields(data, effectiveFieldConfig)) {
        logger.warn(
          "üéÅ ‚ö†Ô∏è Datos no contienen campos requeridos para promociones, procesando sin promociones"
        );
        return data.map((row) =>
          this.transformNormalLine(row, effectiveFieldConfig)
        );
      }

      // // ‚úÖ PASO 1: APLICAR CONVERSIONES DE CANTIDAD A TODOS LOS DATOS
      // logger.info("üîß Aplicando conversiones de cantidades...");
      // let processedData = data.map((row) => {
      //   return this.applyQuantityConversions(row, effectiveFieldConfig);
      // });

      // ‚úÖ CAMBIAR POR: Usar datos originales sin conversi√≥n
      logger.info("üéÅ Procesando promociones sin conversi√≥n previa");
      let processedData = data.map((row) => ({ ...row }));

      // ‚úÖ PASO 2: CONSTRUIR REFERENCIAS DE L√çNEAS
      logger.info("üîó Construyendo referencias de l√≠neas...");
      const lineReferences = this.buildLineReferences(
        processedData,
        effectiveFieldConfig
      );

      // ‚úÖ PASO 3: PROCESAR CADA FILA CON PROMOCIONES
      logger.info("üéÅ Procesando promociones por fila...");
      processedData = processedData.map((row) => {
        return this.processPromotionRow(
          row,
          processedData,
          effectiveFieldConfig,
          lineReferences
        );
      });

      // ‚úÖ PASO 4: APLICAR REGLAS ESPEC√çFICAS SI EST√ÅN CONFIGURADAS
      if (
        mapping.promotionConfig?.rules &&
        mapping.promotionConfig.rules.length > 0
      ) {
        logger.info("üìè Aplicando reglas espec√≠ficas de promociones...");
        processedData = this.applyPromotionRules(
          processedData,
          mapping.promotionConfig
        );
      }

      // ‚úÖ PASO 5: LIMPIAR DATOS PROCESADOS
      processedData.forEach((row) => {
        this.cleanTransformedData(row);
      });

      // ‚úÖ ESTAD√çSTICAS FINALES
      const bonusLines = processedData.filter((line) => line._IS_BONUS_LINE);
      const triggerLines = processedData.filter(
        (line) => line._IS_TRIGGER_LINE
      );
      const regularLines = processedData.filter(
        (line) => !line._IS_BONUS_LINE && !line._IS_TRIGGER_LINE
      );

      logger.info(
        `üéÅ ‚úÖ Procesamiento completado: ${regularLines.length} regulares, ${bonusLines.length} bonificaciones, ${triggerLines.length} triggers`
      );

      return processedData;
    } catch (error) {
      logger.error(
        `üéÅ Error en procesamiento de promociones: ${error.message}`
      );
      throw new Error(`Error procesando promociones: ${error.message}`);
    }
  }

  /**
   * ‚úÖ NUEVO: Construye referencias entre l√≠neas regulares y bonificaciones
   * @param {Array} allRows - Todas las filas de datos
   * @param {Object} config - Configuraci√≥n de campos
   * @returns {Map} - Mapa de referencias l√≠nea -> NUM_LN
   */

  static buildLineReferences(allRows, config) {
    const lineReferences = new Map();
    const articleToLineMap = new Map(); // COD_ART -> NUM_LN

    logger.debug(`üéÅ Construyendo mapa de referencias de l√≠neas...`);

    // ‚úÖ PRIMERA PASADA: Mapear c√≥digos de art√≠culo a n√∫meros de l√≠nea
    allRows.forEach((row) => {
      const codArt = row[config.articleField]; // COD_ART
      const numLn = row[config.lineNumberField]; // NUM_LN

      if (codArt && numLn) {
        // Si ya existe el art√≠culo, mantener una lista de l√≠neas
        if (articleToLineMap.has(codArt)) {
          const existingLines = articleToLineMap.get(codArt);
          if (Array.isArray(existingLines)) {
            existingLines.push(numLn);
          } else {
            articleToLineMap.set(codArt, [existingLines, numLn]);
          }
        } else {
          articleToLineMap.set(codArt, numLn);
        }
      }
    });

    // ‚úÖ SEGUNDA PASADA: Construir referencias para bonificaciones
    allRows.forEach((row) => {
      const artBon = row[config.bonusField]; // ART_BON
      const codArtRfr = row[config.referenceField]; // COD_ART_RFR
      const numLn = row[config.lineNumberField]; // NUM_LN

      if (artBon === "B" && codArtRfr) {
        // ‚úÖ Buscar el NUM_LN del art√≠culo de referencia
        let referencedLineNumber = null;

        if (articleToLineMap.has(codArtRfr)) {
          const lineRef = articleToLineMap.get(codArtRfr);

          // Si hay m√∫ltiples l√≠neas para el mismo art√≠culo, usar la primera
          if (Array.isArray(lineRef)) {
            referencedLineNumber = lineRef[0];
            logger.debug(
              `üéÅ M√∫ltiples l√≠neas para ${codArtRfr}, usando l√≠nea ${referencedLineNumber}`
            );
          } else {
            referencedLineNumber = lineRef;
          }
        }

        if (referencedLineNumber) {
          lineReferences.set(numLn, referencedLineNumber);
          logger.debug(
            `üéÅ Referencia creada: L√≠nea ${numLn} -> L√≠nea ${referencedLineNumber} (${codArtRfr})`
          );
        } else {
          logger.warn(
            `üéÅ No se encontr√≥ l√≠nea de referencia para ${codArtRfr}`
          );
        }
      }
    });

    logger.debug(
      `üéÅ Referencias de l√≠neas construidas: ${lineReferences.size} referencias`
    );
    return lineReferences;
  }

  /**
   * ‚úÖ MEJORADO: Identifica tipo de promoci√≥n con l√≥gica m√°s precisa
   * @param {Object} row - Fila de datos
   * @param {Object} config - Configuraci√≥n de campos
   * @returns {string} - Tipo de promoci√≥n identificado
   */
  static identifyPromotionType(row, config) {
    const artBon = row[config.bonusField]; // ART_BON
    const codArtRfr = row[config.referenceField]; // COD_ART_RFR
    const cantidadBonifica =
      row["CANTIDAD_BONIFICAD"] || row["CANTIDAD_BONIFICADA"];
    const porDscAp = row["POR_DSC_AP"];
    const monDsc = row["MON_DSC"] || row[config.discountField];
    const codArt = row[config.articleField]; // COD_ART

    logger.debug(`üéÅ Analizando l√≠nea para promoci√≥n:`, {
      artBon,
      codArtRfr,
      cantidadBonifica: cantidadBonifica || 0,
      porDscAp: porDscAp || 0,
      monDsc: monDsc || 0,
      codArt,
    });

    // ‚úÖ CASO 1: L√≠nea marcada como bonificaci√≥n con ART_BON = 'B'
    if (artBon === "B" || artBon === config.bonusIndicatorValue) {
      // ‚úÖ SUBCASO 1A: Bonificaci√≥n real con cantidad
      if (cantidadBonifica && parseFloat(cantidadBonifica) > 0) {
        logger.debug(
          `üéÅ Bonificaci√≥n por cantidad detectada: ${cantidadBonifica}`
        );
        return "BONUS_QUANTITY";
      }

      // ‚úÖ SUBCASO 1B: "Bonificaci√≥n" que es realmente descuento (tratar como regular)
      if (
        (!cantidadBonifica || parseFloat(cantidadBonifica) === 0) &&
        ((porDscAp && parseFloat(porDscAp) > 0) ||
          (monDsc && parseFloat(monDsc) > 0))
      ) {
        logger.debug(
          `üéÅ L√≠nea con descuento (no bonificaci√≥n real) - tratando como regular`
        );
        return "REGULAR_WITH_DISCOUNT";
      }

      // ‚úÖ SUBCASO 1C: COD_ART_RFR hace referencia al mismo art√≠culo
      if (codArtRfr === codArt) {
        logger.debug(`üéÅ Bonificaci√≥n del mismo producto detectada`);
        return "SELF_BONUS";
      }

      // ‚úÖ SUBCASO 1D: COD_ART_RFR hace referencia a otro art√≠culo
      if (codArtRfr && codArtRfr !== codArt) {
        logger.debug(
          `üéÅ Bonificaci√≥n cruzada detectada: ${codArtRfr} -> ${codArt}`
        );
        return "CROSS_BONUS";
      }

      logger.debug(`üéÅ Bonificaci√≥n gen√©rica detectada`);
      return "BONUS_GENERIC";
    }

    // ‚úÖ CASO 2: L√≠nea regular
    logger.debug(`üéÅ L√≠nea regular detectada`);
    return "REGULAR";
  }

  /**
   * ‚úÖ NUEVO: Procesa una fila individual aplicando toda la l√≥gica de promociones
   * @param {Object} row - Fila de datos original
   * @param {Array} allRows - Todas las filas para referencias
   * @param {Object} config - Configuraci√≥n de campos
   * @param {Map} lineReferences - Mapa de referencias de l√≠neas
   * @returns {Object} - Fila procesada
   */
  static processPromotionRow(row, allRows, config, lineReferences) {
    try {
      // ‚úÖ 1. Crear copia de la fila para no modificar original
      let processedRow = { ...row };

      // ‚úÖ 2. Identificar tipo de promoci√≥n
      const promotionType = this.identifyPromotionType(processedRow, config);

      // ‚úÖ 3. Procesar seg√∫n tipo identificado
      switch (promotionType) {
        case "REGULAR_WITH_DISCOUNT":
          // Tratar como l√≠nea regular, mantener descuentos
          logger.debug(`üéÅ Procesando como regular con descuento`);
          processedRow = this.processRegularLine(processedRow, config);
          processedRow._IS_REGULAR_WITH_DISCOUNT = true;
          break;

        case "BONUS_QUANTITY":
        case "SELF_BONUS":
        case "CROSS_BONUS":
        case "BONUS_GENERIC":
          // Procesar como bonificaci√≥n real
          logger.debug(`üéÅ Procesando bonificaci√≥n tipo: ${promotionType}`);
          processedRow = this.processBonusLine(
            processedRow,
            config,
            lineReferences
          );
          break;

        case "REGULAR":
        default:
          // L√≠nea regular sin promoci√≥n
          logger.debug(`üéÅ Procesando l√≠nea regular`);
          processedRow = this.processRegularLine(processedRow, config);
          break;
      }

      // ‚úÖ 4. Agregar metadatos de promoci√≥n
      processedRow._promotionType = promotionType;
      processedRow._processed = true;

      return processedRow;
    } catch (error) {
      logger.error(`üéÅ Error procesando fila de promoci√≥n: ${error.message}`);
      return { ...row, _error: error.message };
    }
  }

  /**
   * ‚úÖ NUEVO: Procesa l√≠nea regular (sin bonificaci√≥n)
   * @param {Object} row - Fila de datos
   * @param {Object} config - Configuraci√≥n de campos
   * @returns {Object} - Fila procesada
   */
  static processRegularLine(row, config) {
    const processedRow = { ...row };

    // ‚úÖ Para l√≠neas REGULARES, CNT_MAX va a CANTIDAD_PEDIDA
    const cantidadPedida = row["CNT_MAX"] || row["CANTIDAD_PEDIDA"] || 0;

    logger.info(`üîç üîç DEBUGGING L√çNEA REGULAR:`);
    logger.info(`üîç üîç CNT_MAX original: ${row["CNT_MAX"]}`);
    logger.info(`üîç üîç Cantidad pedida: ${cantidadPedida}`);

    // ‚úÖ Establecer campos de promoci√≥n est√°ndar para l√≠nea regular
    processedRow.PEDIDO_LINEA_BONIF = null;
    processedRow.CANTIDAD_BONIFICAD = 0;

    // ‚úÖ Para l√≠neas regulares, CNT_MAX es la cantidad pedida
    processedRow.CANTIDAD_PEDIDA = parseInt(cantidadPedida) || 0; // En cajas (se convertir√° despu√©s)
    processedRow.CANTIDAD_A_FACTURA = parseInt(cantidadPedida) || 0; // En cajas (se convertir√° despu√©s)

    // ‚úÖ Marcar como l√≠nea regular
    processedRow._IS_BONUS_LINE = false;
    processedRow._IS_TRIGGER_LINE = false;

    // NUEVO: Identificar si es regular con descuento
    const hasDiscount =
      (row["MON_DSC"] && parseFloat(row["MON_DSC"]) > 0) ||
      (row["POR_DSC_AP"] && parseFloat(row["POR_DSC_AP"]) > 0);

    if (hasDiscount && row["ART_BON"] === "B") {
      processedRow._IS_REGULAR_WITH_DISCOUNT = true;
      logger.info(
        `L√çNEA REGULAR CON DESCUENTO detectada - mantiene cantidades normales`
      );
    }

    logger.info(
      `üîç ‚úÖ L√≠nea regular procesada: ${
        processedRow[config.articleField]
      } - CANTIDAD_PEDIDA: ${processedRow.CANTIDAD_PEDIDA} cajas`
    );

    return processedRow;
  }

  /**
   * ‚úÖ NUEVO: Procesa l√≠nea de bonificaci√≥n
   * @param {Object} row - Fila de datos
   * @param {Object} config - Configuraci√≥n de campos
   * @param {Map} lineReferences - Referencias de l√≠neas
   * @returns {Object} - Fila procesada
   */
  static processBonusLine(row, config, lineReferences) {
    const processedRow = { ...row };
    const numLn = row[config.lineNumberField];

    // ‚úÖ Establecer referencia de l√≠nea si existe
    if (lineReferences && lineReferences.has(numLn)) {
      processedRow.PEDIDO_LINEA_BONIF = lineReferences.get(numLn);
      logger.debug(
        `üéÅ Referencia asignada: L√≠nea ${numLn} -> L√≠nea ${processedRow.PEDIDO_LINEA_BONIF}`
      );
    } else {
      processedRow.PEDIDO_LINEA_BONIF = null;
      logger.warn(
        `üéÅ No se encontr√≥ referencia para l√≠nea de bonificaci√≥n ${numLn}`
      );
    }

    // ‚úÖ CORRECCI√ìN CR√çTICA: Usar CNT_MAX para bonificaciones, NO para pedidos
     const cantidadBonifica = row["CNT_MAX"] || 0;

    // ‚úÖ CAMPOS CORRECTOS PARA BONIFICACIONES
    processedRow.CANTIDAD_PEDIDA = 0; // ‚úÖ Bonificaciones NO se piden
    processedRow.CANTIDAD_A_FACTURA = 0; // ‚úÖ Bonificaciones NO se facturan
     processedRow.CANTIDAD_BONIFICAD = parseInt(cantidadBonifica) || 0;

    // ‚úÖ Marcar como l√≠nea de bonificaci√≥n
    processedRow._IS_BONUS_LINE = true;
    processedRow._IS_TRIGGER_LINE = false;
    processedRow._PROMOTION_TYPE = "BONUS";

    logger.debug(
      `üéÅ L√≠nea bonificaci√≥n procesada CORRECTAMENTE: ${
        processedRow[config.articleField]
      } - CANTIDAD_BONIFICAD: ${processedRow.CANTIDAD_BONIFICAD}`
    );

    return processedRow;
  }

  // ===============================
  // 2. M√âTODOS DE VALIDACI√ìN Y CONFIGURACI√ìN
  // ===============================

  /**
   * Valida configuraci√≥n de promociones
   * @param {Object} mapping - Configuraci√≥n de mapping
   * @returns {boolean} - Si la configuraci√≥n es v√°lida
   */
  static validatePromotionConfig(mapping) {
    try {
      if (!mapping.promotionConfig) {
        logger.debug("üéÅ No hay configuraci√≥n de promociones");
        return false;
      }

      const config = mapping.promotionConfig;

      // Validaciones b√°sicas
      if (!config.enabled) {
        logger.debug("üéÅ Promociones deshabilitadas");
        return false;
      }

      // Validar campos requeridos si est√°n definidos
      const requiredFields = ["bonusField", "referenceField", "articleField"];
      const missingFields = requiredFields.filter(
        (field) =>
          config.detectFields &&
          config.detectFields[field] &&
          !config.detectFields[field]
      );

      if (missingFields.length > 0) {
        logger.warn(
          `üéÅ Campos requeridos faltantes en configuraci√≥n: ${missingFields.join(
            ", "
          )}`
        );
        return false;
      }

      logger.debug("üéÅ ‚úÖ Configuraci√≥n de promociones v√°lida");
      return true;
    } catch (error) {
      logger.error(`üéÅ Error validando configuraci√≥n: ${error.message}`);
      return false;
    }
  }

  /**
   * Obtiene configuraci√≥n de campos de promociones - MEJORADO
   * @param {Object} mapping - Configuraci√≥n de mapping
   * @returns {Object} - Configuraci√≥n de campos
   */
  static getFieldConfiguration(mapping) {
    const defaultConfig = {
      // Campos de detecci√≥n
      bonusField: "ART_BON",
      bonusIndicatorValue: "B",
      referenceField: "COD_ART_RFR",
      discountField: "MON_DSC",
      lineNumberField: "NUM_LN",
      articleField: "COD_ART",
      quantityField: "CNT_MAX",

      // Campos destino
      bonusLineRef: "PEDIDO_LINEA_BONIF",
      orderedQuantity: "CANTIDAD_PEDIDA",
      invoiceQuantity: "CANTIDAD_A_FACTURA",
      bonusQuantity: "CANTIDAD_BONIFICAD",
    };

    // ‚úÖ COMBINAR CON CONFIGURACI√ìN DEL MAPPING
    if (mapping.promotionConfig) {
      return {
        ...defaultConfig,
        ...mapping.promotionConfig.detectFields,
        ...mapping.promotionConfig.targetFields,
      };
    }

    return defaultConfig;
  }

  /**
   * Determina si se deben usar promociones para este mapping
   * @param {Object} mapping - Configuraci√≥n de mapping
   * @returns {boolean} - Si se deben usar promociones
   */
  static shouldUsePromotions(mapping) {
    try {
      // 1. Verificar si las promociones est√°n habilitadas
      if (!mapping.promotionConfig?.enabled) {
        logger.debug("üéÅ Promociones deshabilitadas en configuraci√≥n");
        return false;
      }

      // 2. Validar configuraci√≥n de promociones
      if (!this.validatePromotionConfig(mapping)) {
        logger.debug("üéÅ Configuraci√≥n de promociones inv√°lida");
        return false;
      }

      // 3. Verificar que existan tablas de detalle
      const detailTables =
        mapping.tableConfigs?.filter((tc) => tc.isDetailTable) || [];
      if (detailTables.length === 0) {
        logger.debug("üéÅ No hay tablas de detalle configuradas");
        return false;
      }

      logger.info("üéÅ ‚úÖ Condiciones para promociones cumplidas");
      return true;
    } catch (error) {
      logger.error(`üéÅ Error verificando promociones: ${error.message}`);
      return false;
    }
  }

  /**
   * Valida que los datos contengan campos requeridos para promociones
   * @param {Array} data - Datos a validar
   * @param {Object} config - Configuraci√≥n de campos
   * @returns {boolean} - Si los datos son v√°lidos para promociones
   */
  static validateDataFields(data, config) {
    if (!data || data.length === 0) {
      return false;
    }

    const firstRecord = data[0];
    const requiredFields = [
      config.bonusField,
      config.referenceField,
      config.articleField,
      config.lineNumberField,
    ];

    const missingFields = requiredFields.filter(
      (field) => !firstRecord.hasOwnProperty(field)
    );

    if (missingFields.length > 0) {
      logger.warn(
        `üéÅ Campos requeridos faltantes en datos: ${missingFields.join(", ")}`
      );
      return false;
    }

    return true;
  }

  // ===============================
  // 3. M√âTODOS DE TRANSFORMACI√ìN Y LIMPIEZA
  // ===============================

  /**
   * Transforma l√≠nea normal (sin promociones)
   * @param {Object} row - Fila de datos
   * @param {Object} config - Configuraci√≥n
   * @returns {Object} - Fila transformada
   */
  static transformNormalLine(row, config) {
    const transformed = { ...row };

    // Establecer valores por defecto para campos de promoci√≥n
    transformed.PEDIDO_LINEA_BONIF = null;
    transformed.CANTIDAD_BONIFICAD = 0;

    // Asegurar cantidades b√°sicas
    if (!transformed.CANTIDAD_PEDIDA && config.quantityField) {
      transformed.CANTIDAD_PEDIDA = transformed[config.quantityField] || 0;
    }

    if (!transformed.CANTIDAD_A_FACTURA) {
      transformed.CANTIDAD_A_FACTURA = transformed.CANTIDAD_PEDIDA || 0;
    }

    return transformed;
  }

  /**
   * ‚úÖ MEJORADO: Convierte valor a num√©rico de manera segura
   * @param {*} value - Valor a convertir
   * @returns {number|null} - Valor num√©rico o null
   */
  static parseNumericValue(value) {
    if (value === null || value === undefined || value === "") {
      return null;
    }

    if (typeof value === "number") {
      return isNaN(value) ? null : value;
    }

    if (typeof value === "string") {
      const numericValue = parseFloat(value);
      return isNaN(numericValue) ? null : numericValue;
    }

    return null;
  }

  /**
   * ‚úÖ MEJORADO: Aplica conversi√≥n de unidades de manera segura y completa
   * @param {number} value - Valor a convertir
   * @param {Object} conversion - Configuraci√≥n de conversi√≥n
   * @returns {number} - Valor convertido
   */
  static applyUnitConversion(value, conversion) {
    if (
      !conversion ||
      !conversion.enabled ||
      typeof value !== "number" ||
      isNaN(value)
    ) {
      return value;
    }

    try {
      let factor = conversion.factor || 1;

      // Si hay campo de factor din√°mico, usar ese valor
      if (conversion.conversionFactorField && conversion.sourceData) {
        const dynamicFactor =
          conversion.sourceData[conversion.conversionFactorField];
        if (dynamicFactor !== undefined && dynamicFactor !== null) {
          factor = parseFloat(dynamicFactor);
          if (isNaN(factor)) {
            logger.warn(
              `üîß Factor de conversi√≥n inv√°lido: ${dynamicFactor}, usando factor por defecto`
            );
            factor = conversion.factor || 1;
          }
        }
      }

      let convertedValue = value;

      switch (conversion.operation) {
        case "multiply":
          convertedValue = value * factor;
          break;
        case "divide":
          convertedValue = factor !== 0 ? value / factor : value;
          break;
        case "add":
          convertedValue = value + factor;
          break;
        case "subtract":
          convertedValue = value - factor;
          break;
        default:
          convertedValue = value;
      }

      // Aplicar redondeo si est√° configurado
      if (conversion.decimalPlaces !== undefined) {
        convertedValue = parseFloat(
          convertedValue.toFixed(conversion.decimalPlaces)
        );
      }

      logger.debug(
        `üîß Conversi√≥n aplicada: ${value} ${conversion.operation} ${factor} = ${convertedValue}`
      );

      return convertedValue;
    } catch (error) {
      logger.warn(`üéÅ Error en conversi√≥n de unidades: ${error.message}`);
      return value;
    }
  }

  /**
   * ‚úÖ MEJORADO: Limpia datos transformados de objetos problem√°ticos
   * @param {Object} transformed - Datos transformados
   */
  static cleanTransformedData(transformed) {
    // ‚úÖ ELIMINAR CAMPOS PROBLEM√ÅTICOS CONOCIDOS
    const problematicFields = [
      "CANTIDAD",
      "QTY",
      "CANTIDAD_BONIF", // ‚ùå Campo incorrecto
      "CANTIDAD_A_FACTURAR", // ‚ùå Duplicado de CANTIDAD_A_FACTURA
    ];

    problematicFields.forEach((field) => {
      if (transformed.hasOwnProperty(field)) {
        logger.warn(
          `üßπ Removiendo campo problem√°tico: ${field} = ${transformed[field]}`
        );
        delete transformed[field];
      }
    });

    // ‚úÖ LIMPIAR OBJETOS DE CONFIGURACI√ìN
    Object.keys(transformed).forEach((key) => {
      const value = transformed[key];

      if (
        typeof value === "object" &&
        value !== null &&
        value.sourceField &&
        value.targetField
      ) {
        logger.warn(`üßπ Removiendo objeto de configuraci√≥n: ${key}`);
        delete transformed[key];
      }

      if (value === undefined) {
        transformed[key] = null;
      }
    });

    logger.debug(`üßπ Datos limpiados para inserci√≥n`);
  }

  /**
   * ‚úÖ MEJORADO: Extrae valor real de configuraci√≥n de campo o datos directos
   * @param {Object} data - Datos de la fila
   * @param {string|Object} fieldConfig - Configuraci√≥n del campo
   * @returns {*} - Valor extra√≠do
   */
  static extractValue(data, fieldConfig) {
    if (!fieldConfig) {
      return null;
    }

    // Si es string simple, buscar directamente
    if (typeof fieldConfig === "string") {
      return data[fieldConfig];
    }

    // Si es objeto de configuraci√≥n, extraer correctamente
    if (typeof fieldConfig === "object" && fieldConfig.sourceField) {
      let value = data[fieldConfig.sourceField];

      // ‚úÖ APLICAR CONVERSIONES SI EST√ÅN CONFIGURADAS
      if (fieldConfig.unitConversion?.enabled && typeof value === "number") {
        value = this.applyUnitConversion(value, fieldConfig.unitConversion);
      }

      // ‚úÖ USAR VALOR POR DEFECTO SI NO HAY VALOR
      if (
        (value === null || value === undefined) &&
        fieldConfig.defaultValue !== undefined
      ) {
        value = fieldConfig.defaultValue;
      }

      return value;
    }

    // Si es valor directo
    return fieldConfig;
  }

  // ===============================
  // 4. M√âTODOS DE REGLAS DE PROMOCI√ìN
  // ===============================

  /**
   * Aplica reglas espec√≠ficas de promociones
   * @param {Array} data - Datos procesados
   * @param {Object} promotionConfig - Configuraci√≥n de promociones
   * @returns {Array} - Datos con reglas aplicadas
   */
  static applyPromotionRules(data, promotionConfig) {
    try {
      if (!promotionConfig.rules || promotionConfig.rules.length === 0) {
        logger.debug("üéÅ No hay reglas espec√≠ficas de promoci√≥n configuradas");
        return data;
      }

      logger.info(
        `üéÅ Aplicando ${promotionConfig.rules.length} reglas de promoci√≥n`
      );

      let processedData = [...data];

      for (const rule of promotionConfig.rules) {
        if (rule.enabled !== false) {
          processedData = this.applyPromotionRule(processedData, rule);
        }
      }

      return processedData;
    } catch (error) {
      logger.error(`üéÅ Error aplicando reglas de promoci√≥n: ${error.message}`);
      return data;
    }
  }

  /**
   * Aplica una regla espec√≠fica de promoci√≥n
   * @param {Array} data - Datos
   * @param {Object} rule - Regla a aplicar
   * @returns {Array} - Datos procesados
   */
  static applyPromotionRule(data, rule) {
    try {
      logger.debug(`üéÅ Aplicando regla: ${rule.name} (${rule.type})`);

      switch (rule.type) {
        case "FAMILY_DISCOUNT":
          return this.applyFamilyDiscountRule(data, rule);
        case "QUANTITY_BONUS":
          return this.applyQuantityBonusRule(data, rule);
        case "SCALED_BONUS":
          return this.applyScaledBonusRule(data, rule);
        case "PRODUCT_BONUS":
          return this.applyProductBonusRule(data, rule);
        case "INVOICE_DISCOUNT":
          return this.applyInvoiceDiscountRule(data, rule);
        case "ONE_TIME_OFFER":
          return this.applyOneTimeOfferRule(data, rule);
        case "MINIMUM_QUANTITY":
          return this.applyMinimumQuantityRule(data, rule);
        case "PERCENTAGE_BONUS":
          return this.applyPercentageBonusRule(data, rule);
        default:
          logger.warn(`üéÅ Tipo de regla no soportado: ${rule.type}`);
          return data;
      }
    } catch (error) {
      logger.error(`üéÅ Error aplicando regla ${rule.type}: ${error.message}`);
      return data;
    }
  }

  /**
   * Aplica regla de descuento por familia
   * @param {Array} data - Datos
   * @param {Object} rule - Regla
   * @returns {Array} - Datos procesados
   */
  static applyFamilyDiscountRule(data, rule) {
    logger.debug(`üéÅ Aplicando regla de descuento por familia: ${rule.name}`);

    return data.map((row) => {
      // L√≥gica espec√≠fica para descuentos por familia
      if (
        rule.conditions &&
        this.evaluateRuleConditions(row, rule.conditions)
      ) {
        const processedRow = { ...row };

        if (rule.actions?.discount) {
          const discount = parseFloat(rule.actions.discount);
          if (!isNaN(discount)) {
            processedRow.POR_DSC_AP = discount;
            processedRow._FAMILY_DISCOUNT_APPLIED = true;
            logger.debug(
              `üéÅ Descuento familia aplicado: ${discount}% a ${row.COD_ART}`
            );
          }
        }

        return processedRow;
      }
      return row;
    });
  }

  /**
   * Aplica regla de bonificaci√≥n por cantidad
   * @param {Array} data - Datos
   * @param {Object} rule - Regla
   * @returns {Array} - Datos procesados
   */
  static applyQuantityBonusRule(data, rule) {
    logger.debug(
      `üéÅ Aplicando regla de bonificaci√≥n por cantidad: ${rule.name}`
    );

    const enhancedData = [...data];

    data.forEach((row, index) => {
      if (
        rule.conditions &&
        this.evaluateRuleConditions(row, rule.conditions)
      ) {
        const quantity = parseFloat(row.CANTIDAD_PEDIDA || row.CNT_MAX || 0);

        if (
          rule.actions?.bonusThreshold &&
          quantity >= rule.actions.bonusThreshold
        ) {
          const bonusQuantity =
            Math.floor(quantity / rule.actions.bonusThreshold) *
            (rule.actions.bonusAmount || 1);

          if (bonusQuantity > 0) {
            // Crear l√≠nea de bonificaci√≥n
            const bonusLine = {
              ...row,
              ART_BON: "B",
              COD_ART_RFR: row.COD_ART,
              CANTIDAD_BONIFICAD: bonusQuantity,
              CANTIDAD_PEDIDA: bonusQuantity,
              CANTIDAD_A_FACTURA: 0,
              PEDIDO_LINEA_BONIF: row.NUM_LN,
              _IS_BONUS_LINE: true,
              _QUANTITY_BONUS_APPLIED: true,
              NUM_LN: data.length + enhancedData.length - data.length + 1, // Nuevo n√∫mero de l√≠nea
            };

            enhancedData.push(bonusLine);
            logger.debug(
              `üéÅ Bonificaci√≥n por cantidad creada: ${bonusQuantity} de ${row.COD_ART}`
            );
          }
        }
      }
    });

    return enhancedData;
  }

  /**
   * Aplica regla de bonificaci√≥n escalada
   * @param {Array} data - Datos
   * @param {Object} rule - Regla
   * @returns {Array} - Datos procesados
   */
  static applyScaledBonusRule(data, rule) {
    logger.debug(`üéÅ Aplicando regla de bonificaci√≥n escalada: ${rule.name}`);

    return data.map((row) => {
      if (
        rule.conditions &&
        this.evaluateRuleConditions(row, rule.conditions)
      ) {
        const processedRow = { ...row };
        const quantity = parseFloat(row.CANTIDAD_PEDIDA || row.CNT_MAX || 0);

        // Evaluar escalas de bonificaci√≥n
        if (rule.actions?.scales) {
          for (const scale of rule.actions.scales) {
            if (
              quantity >= scale.minQuantity &&
              (scale.maxQuantity === undefined || quantity <= scale.maxQuantity)
            ) {
              processedRow.CANTIDAD_BONIFICAD =
                (processedRow.CANTIDAD_BONIFICAD || 0) + scale.bonusAmount;
              processedRow._SCALED_BONUS_APPLIED = true;
              logger.debug(
                `üéÅ Bonificaci√≥n escalada aplicada: ${scale.bonusAmount} por escala`
              );
              break;
            }
          }
        }

        return processedRow;
      }
      return row;
    });
  }

  /**
   * Aplica regla de bonificaci√≥n por producto
   * @param {Array} data - Datos
   * @param {Object} rule - Regla
   * @returns {Array} - Datos procesados
   */
  static applyProductBonusRule(data, rule) {
    logger.debug(
      `üéÅ Aplicando regla de bonificaci√≥n por producto: ${rule.name}`
    );

    const enhancedData = [...data];

    data.forEach((row) => {
      if (
        rule.conditions &&
        this.evaluateRuleConditions(row, rule.conditions)
      ) {
        if (rule.actions?.bonusProducts) {
          rule.actions.bonusProducts.forEach((bonusProduct) => {
            const bonusLine = {
              ...row,
              COD_ART: bonusProduct.productCode,
              ART_BON: "B",
              COD_ART_RFR: row.COD_ART,
              CANTIDAD_BONIFICAD: bonusProduct.quantity || 1,
              CANTIDAD_PEDIDA: bonusProduct.quantity || 1,
              CANTIDAD_A_FACTURA: 0,
              PEDIDO_LINEA_BONIF: row.NUM_LN,
              _IS_BONUS_LINE: true,
              _PRODUCT_BONUS_APPLIED: true,
              NUM_LN: data.length + enhancedData.length - data.length + 1,
            };

            enhancedData.push(bonusLine);
            logger.debug(
              `üéÅ Producto bonificaci√≥n creado: ${bonusProduct.productCode}`
            );
          });
        }
      }
    });

    return enhancedData;
  }

  /**
   * Aplica regla de descuento en factura
   * @param {Array} data - Datos
   * @param {Object} rule - Regla
   * @returns {Array} - Datos procesados
   */
  static applyInvoiceDiscountRule(data, rule) {
    logger.debug(`üéÅ Aplicando regla de descuento en factura: ${rule.name}`);

    const totalInvoice = data.reduce((sum, row) => {
      const amount = parseFloat(row.MON_TOT || row.MONTO_TOTAL || 0);
      return sum + amount;
    }, 0);

    if (
      rule.actions?.minimumAmount &&
      totalInvoice >= rule.actions.minimumAmount
    ) {
      return data.map((row) => {
        const processedRow = { ...row };
        if (rule.actions.discountPercentage) {
          processedRow.POR_DSC_FACTURA = rule.actions.discountPercentage;
          processedRow._INVOICE_DISCOUNT_APPLIED = true;
          logger.debug(
            `üéÅ Descuento factura aplicado: ${rule.actions.discountPercentage}%`
          );
        }
        return processedRow;
      });
    }

    return data;
  }

  /**
   * Aplica regla de oferta √∫nica
   * @param {Array} data - Datos
   * @param {Object} rule - Regla
   * @returns {Array} - Datos procesados
   */
  static applyOneTimeOfferRule(data, rule) {
    logger.debug(`üéÅ Aplicando regla de oferta √∫nica: ${rule.name}`);

    let offerApplied = false;

    return data.map((row) => {
      if (
        !offerApplied &&
        rule.conditions &&
        this.evaluateRuleConditions(row, rule.conditions)
      ) {
        const processedRow = { ...row };

        if (rule.actions?.specialPrice) {
          processedRow.PRECIO_ESPECIAL = rule.actions.specialPrice;
          processedRow._ONE_TIME_OFFER_APPLIED = true;
          offerApplied = true;
          logger.debug(
            `üéÅ Oferta √∫nica aplicada: precio especial ${rule.actions.specialPrice}`
          );
        }

        return processedRow;
      }
      return row;
    });
  }

  /**
   * Aplica regla de cantidad m√≠nima
   * @param {Array} data - Datos
   * @param {Object} rule - Regla
   * @returns {Array} - Datos procesados
   */
  static applyMinimumQuantityRule(data, rule) {
    logger.debug(`üéÅ Aplicando regla de cantidad m√≠nima: ${rule.name}`);

    return data.map((row) => {
      if (
        rule.conditions &&
        this.evaluateRuleConditions(row, rule.conditions)
      ) {
        const processedRow = { ...row };
        const currentQuantity = parseFloat(
          row.CANTIDAD_PEDIDA || row.CNT_MAX || 0
        );

        if (
          rule.actions?.minimumQuantity &&
          currentQuantity < rule.actions.minimumQuantity
        ) {
          processedRow.CANTIDAD_PEDIDA = rule.actions.minimumQuantity;
          processedRow.CANTIDAD_A_FACTURA = rule.actions.minimumQuantity;
          processedRow._MINIMUM_QUANTITY_APPLIED = true;
          logger.debug(
            `üéÅ Cantidad m√≠nima aplicada: ${rule.actions.minimumQuantity}`
          );
        }

        return processedRow;
      }
      return row;
    });
  }

  /**
   * Aplica regla de bonificaci√≥n por porcentaje
   * @param {Array} data - Datos
   * @param {Object} rule - Regla
   * @returns {Array} - Datos procesados
   */
  static applyPercentageBonusRule(data, rule) {
    logger.debug(
      `üéÅ Aplicando regla de bonificaci√≥n por porcentaje: ${rule.name}`
    );

    return data.map((row) => {
      if (
        rule.conditions &&
        this.evaluateRuleConditions(row, rule.conditions)
      ) {
        const processedRow = { ...row };
        const baseQuantity = parseFloat(
          row.CANTIDAD_PEDIDA || row.CNT_MAX || 0
        );

        if (rule.actions?.bonusPercentage && baseQuantity > 0) {
          const bonusAmount = Math.floor(
            baseQuantity * (rule.actions.bonusPercentage / 100)
          );
          processedRow.CANTIDAD_BONIFICAD =
            (processedRow.CANTIDAD_BONIFICAD || 0) + bonusAmount;
          processedRow._PERCENTAGE_BONUS_APPLIED = true;
          logger.debug(
            `üéÅ Bonificaci√≥n porcentaje aplicada: ${bonusAmount} (${rule.actions.bonusPercentage}%)`
          );
        }

        return processedRow;
      }
      return row;
    });
  }

  /**
   * Eval√∫a condiciones de una regla
   * @param {Object} row - Fila de datos
   * @param {Object} conditions - Condiciones a evaluar
   * @returns {boolean} - Si las condiciones se cumplen
   */
  static evaluateRuleConditions(row, conditions) {
    try {
      if (!conditions) return true;

      // Evaluar condiciones simples
      for (const [field, condition] of Object.entries(conditions)) {
        const value = row[field];

        if (condition.equals !== undefined && value !== condition.equals) {
          return false;
        }

        if (
          condition.greaterThan !== undefined &&
          parseFloat(value) <= condition.greaterThan
        ) {
          return false;
        }

        if (
          condition.lessThan !== undefined &&
          parseFloat(value) >= condition.lessThan
        ) {
          return false;
        }

        if (
          condition.includes !== undefined &&
          !condition.includes.includes(value)
        ) {
          return false;
        }

        if (
          condition.excludes !== undefined &&
          condition.excludes.includes(value)
        ) {
          return false;
        }
      }

      return true;
    } catch (error) {
      logger.error(`üéÅ Error evaluando condiciones: ${error.message}`);
      return false;
    }
  }

  // ===============================
  // 5. M√âTODOS DE UTILIDAD Y ESTAD√çSTICAS
  // ===============================

  /**
   * Genera estad√≠sticas de procesamiento de promociones
   * @param {Array} originalData - Datos originales
   * @param {Array} processedData - Datos procesados
   * @returns {Object} - Estad√≠sticas
   */
  static generatePromotionStats(originalData, processedData) {
    try {
      const stats = {
        original: {
          totalLines: originalData.length,
          bonusLines: originalData.filter((row) => row.ART_BON === "B").length,
          regularLines: originalData.filter((row) => row.ART_BON !== "B")
            .length,
        },
        processed: {
          totalLines: processedData.length,
          bonusLines: processedData.filter((row) => row._IS_BONUS_LINE).length,
          triggerLines: processedData.filter((row) => row._IS_TRIGGER_LINE)
            .length,
          regularLines: processedData.filter(
            (row) => !row._IS_BONUS_LINE && !row._IS_TRIGGER_LINE
          ).length,
        },
        changes: {
          linesAdded: processedData.length - originalData.length,
          promotionsDetected: processedData.filter(
            (row) => row._promotionType && row._promotionType !== "REGULAR"
          ).length,
          conversionsApplied: processedData.filter((row) => row._processed)
            .length,
        },
      };

      logger.info(
        `üéÅ üìä Estad√≠sticas de promociones: ${JSON.stringify(stats, null, 2)}`
      );
      return stats;
    } catch (error) {
      logger.error(`üéÅ Error generando estad√≠sticas: ${error.message}`);
      return null;
    }
  }

  /**
   * Valida integridad de datos procesados
   * @param {Array} processedData - Datos procesados
   * @returns {Object} - Resultado de validaci√≥n
   */
  static validateProcessedData(processedData) {
    const validation = {
      isValid: true,
      errors: [],
      warnings: [],
    };

    try {
      processedData.forEach((row, index) => {
        // Validar que las bonificaciones tengan referencia
        if (row._IS_BONUS_LINE && !row.PEDIDO_LINEA_BONIF) {
          validation.warnings.push(
            `L√≠nea ${index + 1}: Bonificaci√≥n sin referencia de l√≠nea`
          );
        }

        // Validar cantidades num√©ricas
        const quantityFields = [
          "CANTIDAD_PEDIDA",
          "CANTIDAD_A_FACTURA",
          "CANTIDAD_BONIFICAD",
        ];
        quantityFields.forEach((field) => {
          if (
            row[field] !== null &&
            row[field] !== undefined &&
            isNaN(parseFloat(row[field]))
          ) {
            validation.errors.push(
              `L√≠nea ${index + 1}: ${field} no es num√©rico: ${row[field]}`
            );
            validation.isValid = false;
          }
        });

        // Validar coherencia de bonificaciones
        if (
          row._IS_BONUS_LINE &&
          parseFloat(row.CANTIDAD_BONIFICAD || 0) <= 0
        ) {
          validation.warnings.push(
            `L√≠nea ${index + 1}: Bonificaci√≥n sin cantidad v√°lida`
          );
        }
      });

      logger.info(
        `üéÅ ‚úÖ Validaci√≥n completada: ${
          validation.isValid ? "V√ÅLIDO" : "ERRORES"
        }`
      );
      if (validation.errors.length > 0) {
        logger.error(`üéÅ Errores encontrados: ${validation.errors.join(", ")}`);
      }
      if (validation.warnings.length > 0) {
        logger.warn(`üéÅ Advertencias: ${validation.warnings.join(", ")}`);
      }

      return validation;
    } catch (error) {
      logger.error(`üéÅ Error en validaci√≥n: ${error.message}`);
      return {
        isValid: false,
        errors: [`Error de validaci√≥n: ${error.message}`],
        warnings: [],
      };
    }
  }
}

module.exports = PromotionProcessor;